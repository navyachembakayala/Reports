<?xml version="1.0" encoding="utf-8"?><!--XML Export of VCG Results for directory: C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master. Scanned for Java security issues.--><CodeIssueCollection><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Basket.java</FileName><Line>23</Line><CodeLine>public class Basket {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Configuration.java</FileName><Line>27</Line><CodeLine>public class Configuration {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>6</Priority><Severity>Suspicious Comment</Severity><Title>Comment Indicates Potentially Unfinished Code</Title><Description>The comment includes some wording which indicates that the developer regards it as unfinished or does not trust it to work correctly.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Configuration.java</FileName><Line>41</Line><CodeLine>What to do if destination file already exists</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>6</Priority><Severity>Suspicious Comment</Severity><Title>Comment Indicates Potentially Unfinished Code</Title><Description>The comment includes some wording which indicates that the developer regards it as unfinished or does not trust it to work correctly.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Configuration.java</FileName><Line>50</Line><CodeLine>What to do if a source path contains a symbolic link</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>FileInputStream</Title><Description>This function acts as an entry point for external data and the code should be manually checked to ensure the data obtained is correctly validated and/or sanitised. Additionally, carefull checks/sanitisation should be applied in any situation where the user may be able to control or affect the filename.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Configuration.java</FileName><Line>81</Line><CodeLine>			FileInputStream in = new FileInputStream(configName);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>getResourceAsStream</Title><Description>This function acts as an entry point for external data and the code should be manually checked to ensure the data obtained is correctly validated and/or sanitised. Additionally, carefull checks/sanitisation should be applied in any situation where the user may be able to control or affect the filename.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Configuration.java</FileName><Line>151</Line><CodeLine>				.getClassLoader().getResourceAsStream("minicopier/configuration.ini"));</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>3</Priority><Severity>Medium</Severity><Title>Failure To Release Resources In All Cases</Title><Description>There appears to be no 'finally' block to release resources if an exception occurs, potentially resulting in DoS conditions from excessive resource consumption.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Configuration.java</FileName><Line>159</Line><CodeLine></CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>3</Priority><Severity>Medium</Severity><Title>FileStream Opened Without Exception Handling</Title><Description>There appears to be no 'try' block to safely open the filestream, potentially resulting in server-side exceptions.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Configuration.java</FileName><Line>159</Line><CodeLine></CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>3</Priority><Severity>Medium</Severity><Title>Failure To Release Resources In All Cases</Title><Description>There appears to be no release of resources in the 'finally' block, potentially resulting in DoS conditions from excessive resource consumption.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Configuration.java</FileName><Line>159</Line><CodeLine></CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Copier.java</FileName><Line>30</Line><CodeLine>public class Copier {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Copier.java</FileName><Line>190</Line><CodeLine>            for ( int i = 0; i &lt; dirlist.length; i++) {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>6</Priority><Severity>Suspicious Comment</Severity><Title>Comment Indicates Potentially Unfinished Code</Title><Description>The comment includes some wording which indicates that the developer regards it as unfinished or does not trust it to work correctly.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Copier.java</FileName><Line>362</Line><CodeLine>nothing to do : append==false proceed==true</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Synchronized Code - Possible Performance Impact</Title><Description>There are 7 lines of code in the synchronized block. Manually check the code to ensure any shared resources are not being locked unnecessarily.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Copier.java</FileName><Line>504</Line><CodeLine></CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Copier.java</FileName><Line>520</Line><CodeLine>		this.bytesCounter -= result;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\Copier.java</FileName><Line>693</Line><CodeLine>	private class ForceTreatment extends Thread {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\FailedQueue.java</FileName><Line>28</Line><CodeLine>public class FailedQueue {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\FailedQueue.java</FileName><Line>74</Line><CodeLine>		for (k=0; k&lt;=length-1; k++){</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\FailedQueue.java</FileName><Line>75</Line><CodeLine>			ind = i[k] - del;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\FailedQueue.java</FileName><Line>78</Line><CodeLine>			del++;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\FailedQueue.java</FileName><Line>85</Line><CodeLine>		int[] result = {-1,-1};</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\FailedQueue.java</FileName><Line>92</Line><CodeLine>		for (k=0; k&lt;=length-1; k++){</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\FailedQueue.java</FileName><Line>93</Line><CodeLine>			ind = i[k] - del;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\FailedQueue.java</FileName><Line>97</Line><CodeLine>			del++;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\FailedQueue.java</FileName><Line>107</Line><CodeLine>	private class FailedModel extends DefaultTableModel{</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\FileToTransfer.java</FileName><Line>28</Line><CodeLine>public class FileToTransfer {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>30</Line><CodeLine>public class MainQueue {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Synchronized Code - Possible Performance Impact</Title><Description>There are 7 lines of code in the synchronized block. Manually check the code to ensure any shared resources are not being locked unnecessarily.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>57</Line><CodeLine></CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>78</Line><CodeLine>		int k = length-1;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>82</Line><CodeLine>		for (k=length-1; k&gt;=0; k--){</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>83</Line><CodeLine>			ind = i[k] + del;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>87</Line><CodeLine>			del++;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>90</Line><CodeLine>		result[1] = length-1;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>108</Line><CodeLine>		int[] result = {-1,-1};</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>114</Line><CodeLine>		for (k=0; k&lt;=length-1; k++){</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>115</Line><CodeLine>			ind = i[k] - del;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>120</Line><CodeLine>			del++;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>123</Line><CodeLine>		result[1] = tableModel.getRowCount()-1;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>124</Line><CodeLine>		result[0] = result[1]-(length-1);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>142</Line><CodeLine>		int[] result = {-1,-1};</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>146</Line><CodeLine>		int k = length-1;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>150</Line><CodeLine>		int toInsert = (start == 0 ? 0 : start-1);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>153</Line><CodeLine>		for (k=length-1; k&gt;=0; k--){</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>154</Line><CodeLine>			ind = i[k] + del;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>158</Line><CodeLine>			del++;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>162</Line><CodeLine>		result[1]=toInsert+length-1;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>182</Line><CodeLine>		int[] result = {-1,-1};</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>184</Line><CodeLine>		int last = i[length-1];</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>191</Line><CodeLine>		int toInsert = (last == mainQueue.size()-1 ? mainQueue.size() : last+2);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>194</Line><CodeLine>		for (k=0; k&lt;=length-1; k++){</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>195</Line><CodeLine>			ind = i[k] - del;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>198</Line><CodeLine>			this.tableModel.moveRow(ind,ind,toInsert-1);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>199</Line><CodeLine>			del++;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>202</Line><CodeLine>		result[1] = toInsert-1;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>203</Line><CodeLine>		result[0] = result[1]-(length-1);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>223</Line><CodeLine>		int[] result = {-1,-1};</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>230</Line><CodeLine>		for (k=0; k&lt;=length-1; k++){</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>231</Line><CodeLine>			ind = i[k] - del;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>235</Line><CodeLine>			del++;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\MainQueue.java</FileName><Line>252</Line><CodeLine>	public class TransfersModel extends DefaultTableModel{</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\ThroughputLimitInputStream.java</FileName><Line>53</Line><CodeLine>public class ThroughputLimitInputStream extends InputStream {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\ThroughputLimitInputStream.java</FileName><Line>125</Line><CodeLine>            while((allowedBytes=bpsLimit- nbBytesReadThisSecond)&lt;=0) {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Synchronized Code - Possible Performance Impact</Title><Description>There are 10 lines of code in the synchronized block. Manually check the code to ensure any shared resources are not being locked unnecessarily.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\ThroughputLimitInputStream.java</FileName><Line>147</Line><CodeLine></CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\ThroughputLimitInputStream.java</FileName><Line>167</Line><CodeLine>        return 1000-(now%1000);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\TransferTask.java</FileName><Line>24</Line><CodeLine>public class TransferTask extends Thread{</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>java.io.File</Title><Description>This functionality acts as an entry point for external data and the code should be manually checked to ensure the data obtained is correctly validated and/or sanitised. Additionally, carefull checks/sanitisation should be applied in any situation where the user may be able to control or affect the filename.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\TransferTask.java</FileName><Line>97</Line><CodeLine>        java.io.FileOutputStream destinationFile = null;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>java.io.FileOutputStream</Title><Description>This functionality acts as an entry point for external data and the code should be manually checked to ensure the data obtained is correctly validated and/or sanitised. Additionally, carefull checks/sanitisation should be applied in any situation where the user may be able to control or affect the filename.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\TransferTask.java</FileName><Line>97</Line><CodeLine>        java.io.FileOutputStream destinationFile = null;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>FileInputStream</Title><Description>This function acts as an entry point for external data and the code should be manually checked to ensure the data obtained is correctly validated and/or sanitised. Additionally, carefull checks/sanitisation should be applied in any situation where the user may be able to control or affect the filename.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\TransferTask.java</FileName><Line>112</Line><CodeLine>                sourceFile = new ThroughputLimitInputStream(new java.io.FileInputStream(source));</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>java.io.File</Title><Description>This functionality acts as an entry point for external data and the code should be manually checked to ensure the data obtained is correctly validated and/or sanitised. Additionally, carefull checks/sanitisation should be applied in any situation where the user may be able to control or affect the filename.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\TransferTask.java</FileName><Line>112</Line><CodeLine>                sourceFile = new ThroughputLimitInputStream(new java.io.FileInputStream(source));</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>java.io.File</Title><Description>This functionality acts as an entry point for external data and the code should be manually checked to ensure the data obtained is correctly validated and/or sanitised. Additionally, carefull checks/sanitisation should be applied in any situation where the user may be able to control or affect the filename.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\TransferTask.java</FileName><Line>113</Line><CodeLine>                destinationFile = new java.io.FileOutputStream(destination,this.append);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>java.io.FileOutputStream</Title><Description>This functionality acts as an entry point for external data and the code should be manually checked to ensure the data obtained is correctly validated and/or sanitised. Additionally, carefull checks/sanitisation should be applied in any situation where the user may be able to control or affect the filename.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\TransferTask.java</FileName><Line>113</Line><CodeLine>                destinationFile = new java.io.FileOutputStream(destination,this.append);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>FileInputStream</Title><Description>This function acts as an entry point for external data and the code should be manually checked to ensure the data obtained is correctly validated and/or sanitised. Additionally, carefull checks/sanitisation should be applied in any situation where the user may be able to control or affect the filename.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\TransferTask.java</FileName><Line>124</Line><CodeLine>	                	sourceFile = new ThroughputLimitInputStream(new java.io.FileInputStream(source));</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>java.io.File</Title><Description>This functionality acts as an entry point for external data and the code should be manually checked to ensure the data obtained is correctly validated and/or sanitised. Additionally, carefull checks/sanitisation should be applied in any situation where the user may be able to control or affect the filename.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\TransferTask.java</FileName><Line>124</Line><CodeLine>	                	sourceFile = new ThroughputLimitInputStream(new java.io.FileInputStream(source));</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Synchronized Code - Possible Performance Impact</Title><Description>There are 7 lines of code in the synchronized block. Manually check the code to ensure any shared resources are not being locked unnecessarily.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\TransferTask.java</FileName><Line>150</Line><CodeLine></CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>java.io.File</Title><Description>This functionality acts as an entry point for external data and the code should be manually checked to ensure the data obtained is correctly validated and/or sanitised. Additionally, carefull checks/sanitisation should be applied in any situation where the user may be able to control or affect the filename.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\TransferTask.java</FileName><Line>164</Line><CodeLine>        } catch( java.io.FileNotFoundException f ) {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\Credits.java</FileName><Line>32</Line><CodeLine>public class Credits extends JDialog {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\Credits.java</FileName><Line>159</Line><CodeLine>	private class ActionOK implements ActionListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\DialogMsg.java</FileName><Line>24</Line><CodeLine>public class DialogMsg {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\DialogMsg.java</FileName><Line>135</Line><CodeLine>			" : "+ prettySize(sourceSize)+ "\n"+</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\DialogMsg.java</FileName><Line>138</Line><CodeLine>			" : "+ prettySize(destSize)+ "\n"</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\DialogMsg.java</FileName><Line>139</Line><CodeLine>			+targetPath+"\n\n"</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\DialogMsg.java</FileName><Line>174</Line><CodeLine>				"MiniCopier - 0.2\nNovember 2007\nAdrian Courrèges\n\n"</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\DialogMsg.java</FileName><Line>175</Line><CodeLine>				+"For bug reports or suggestions,\n"</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\DialogMsg.java</FileName><Line>176</Line><CodeLine>				+"please, send an email to :\n"</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\FailedPanel.java</FileName><Line>32</Line><CodeLine>public class FailedPanel extends JPanel {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\FailedPanel.java</FileName><Line>90</Line><CodeLine>	private class RightTableCellRenderer extends DefaultTableCellRenderer {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>40</Line><CodeLine>public class MainFrame extends JFrame{</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>180</Line><CodeLine>	private class RequestPauseResume implements ActionListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>193</Line><CodeLine>	private class Drop2Basket implements DropTargetListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>204</Line><CodeLine>			      for (int i = 0; i &lt; flavors.length; i++) {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>226</Line><CodeLine>			    	  else if (obj instanceof String &amp;&amp; "uri-list".equals(flavors[i].getSubType()) ){</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>262</Line><CodeLine>	private class Drop2Folder implements DropTargetListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>272</Line><CodeLine>			      for (int i = 0; i &lt; flavors.length; i++) {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>296</Line><CodeLine>			    	  else if (obj instanceof String &amp;&amp; "uri-list".equals(flavors[i].getSubType()) ){</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>366</Line><CodeLine>	private class RefreshStats extends Thread {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>387</Line><CodeLine>					if (historyBytes.size() &gt; maxSize) historyBytes.removeElementAt(historyBytes.size()-1);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>414</Line><CodeLine>				try {Thread.sleep(refreshRate-(int)(System.currentTimeMillis()-timeInit));}</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>421</Line><CodeLine>	private class ActionQueueButtons implements ActionListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>3</Priority><Severity>Medium</Severity><Title>Synchronized Code - Possible Performance Impact</Title><Description>There are 19 lines of code in the synchronized block. Manually check the code to ensure any shared resources are not being locked unnecessarily.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>456</Line><CodeLine></CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>460</Line><CodeLine>	private class ActionFailedButtons implements ActionListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Synchronized Code - Possible Performance Impact</Title><Description>There are 7 lines of code in the synchronized block. Manually check the code to ensure any shared resources are not being locked unnecessarily.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>476</Line><CodeLine></CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>481</Line><CodeLine>	private class ActionSkip implements ActionListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>507</Line><CodeLine>	private class ActionCancel implements ActionListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>6</Priority><Severity>Suspicious Comment</Severity><Title>Comment Indicates Potentially Unfinished Code</Title><Description>The comment includes some wording which indicates that the developer regards it as unfinished or does not trust it to work correctly.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>510</Line><CodeLine>TODO : remove the part already copied of the</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>516</Line><CodeLine>	private class ActionCredits implements ActionListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>523</Line><CodeLine>	private class ActionBasket implements MouseListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>539</Line><CodeLine>	private class ActionCollision implements ActionListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>546</Line><CodeLine>    private class ActionLimitSpeed implements ActionListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>556</Line><CodeLine>    private class ActionSpeedChange implements ChangeListener, ActionListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Inner Class</Title><Description>When translated into bytecode, any inner classes are rebuilt within the JVM as external classes within the same package. As a result, any class in the package can access these inner classes. The enclosing class's private fields become protected fields, accessible by the now external 'inner class'.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\MainFrame.java</FileName><Line>571</Line><CodeLine>	private class ActionSymbolic implements ActionListener {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\OptionsPanel.java</FileName><Line>29</Line><CodeLine>public class OptionsPanel extends JPanel {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\QueueJButton.java</FileName><Line>27</Line><CodeLine>public class QueueJButton extends JButton{</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\SupPanel.java</FileName><Line>30</Line><CodeLine>public class SupPanel extends JPanel {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\TransfersPanel.java</FileName><Line>32</Line><CodeLine>public class TransfersPanel extends JPanel {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\gui\TransfersPanel.java</FileName><Line>103</Line><CodeLine>	public class RightTableCellRenderer extends DefaultTableCellRenderer {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\Users\User\Desktop\__Project_minicopier-master\minicopier-master\src\minicopier\i18n\Language.java</FileName><Line>24</Line><CodeLine>public class Language {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue></CodeIssueCollection>